"use strict";

const Promise = require('bluebird');
<<<<<<< HEAD
const debug = require('debug')('cypress:cli');
const path = require('path');
const util = require('../util');
const state = require('../tasks/state');
=======

const debug = require('debug')('cypress:cli');

const path = require('path');

const util = require('../util');

const state = require('../tasks/state');

>>>>>>> branch-teste-codigo
const {
  throwFormErrorText,
  errors
} = require('../errors');
<<<<<<< HEAD
=======

>>>>>>> branch-teste-codigo
const getVersions = () => {
  return Promise.try(() => {
    if (util.getEnv('CYPRESS_RUN_BINARY')) {
      let envBinaryPath = path.resolve(util.getEnv('CYPRESS_RUN_BINARY'));
      return state.parseRealPlatformBinaryFolderAsync(envBinaryPath).then(envBinaryDir => {
        if (!envBinaryDir) {
          return throwFormErrorText(errors.CYPRESS_RUN_BINARY.notValid(envBinaryPath))();
        }
<<<<<<< HEAD
=======

>>>>>>> branch-teste-codigo
        debug('CYPRESS_RUN_BINARY has binaryDir:', envBinaryDir);
        return envBinaryDir;
      }).catch({
        code: 'ENOENT'
      }, err => {
        return throwFormErrorText(errors.CYPRESS_RUN_BINARY.notValid(envBinaryPath))(err.message);
      });
    }
<<<<<<< HEAD
=======

>>>>>>> branch-teste-codigo
    return state.getBinaryDir();
  }).then(state.getBinaryPkgAsync).then(pkg => {
    const versions = {
      binary: state.getBinaryPkgVersion(pkg),
      electronVersion: state.getBinaryElectronVersion(pkg),
      electronNodeVersion: state.getBinaryElectronNodeVersion(pkg)
    };
    debug('binary versions %o', versions);
    return versions;
  }).then(binaryVersions => {
    const buildInfo = util.pkgBuildInfo();
    let packageVersion = util.pkgVersion();
    if (!buildInfo) packageVersion += ' (development)';else if (!buildInfo.stable) packageVersion += ' (pre-release)';
    const versions = {
      package: packageVersion,
      binary: binaryVersions.binary || 'not installed',
      electronVersion: binaryVersions.electronVersion || 'not found',
      electronNodeVersion: binaryVersions.electronNodeVersion || 'not found'
    };
    debug('combined versions %o', versions);
    return versions;
  });
};
<<<<<<< HEAD
=======

>>>>>>> branch-teste-codigo
module.exports = {
  getVersions
};