"use strict";

const chalk = require('chalk');
<<<<<<< HEAD
let logs = [];
const logLevel = () => {
  return process.env.npm_config_loglevel || 'notice';
};
=======

let logs = [];

const logLevel = () => {
  return process.env.npm_config_loglevel || 'notice';
};

>>>>>>> branch-teste-codigo
const error = (...messages) => {
  logs.push(messages.join(' '));
  console.log(chalk.red(...messages)); // eslint-disable-line no-console
};

const warn = (...messages) => {
  if (logLevel() === 'silent') return;
  logs.push(messages.join(' '));
  console.log(chalk.yellow(...messages)); // eslint-disable-line no-console
};

const log = (...messages) => {
  if (logLevel() === 'silent' || logLevel() === 'warn') return;
  logs.push(messages.join(' '));
  console.log(...messages); // eslint-disable-line no-console
};

const always = (...messages) => {
  logs.push(messages.join(' '));
  console.log(...messages); // eslint-disable-line no-console
<<<<<<< HEAD
};

// splits long text into lines and calls log()
// on each one to allow easy unit testing for specific message
const logLines = text => {
  const lines = text.split('\n');
=======
}; // splits long text into lines and calls log()
// on each one to allow easy unit testing for specific message


const logLines = text => {
  const lines = text.split('\n');

>>>>>>> branch-teste-codigo
  for (const line of lines) {
    log(line);
  }
};
<<<<<<< HEAD
const print = () => {
  return logs.join('\n');
};
const reset = () => {
  logs = [];
};
=======

const print = () => {
  return logs.join('\n');
};

const reset = () => {
  logs = [];
};

>>>>>>> branch-teste-codigo
module.exports = {
  log,
  warn,
  error,
  always,
  logLines,
  print,
  reset,
  logLevel
};